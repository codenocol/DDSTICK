#ifndef _FASTLED_H_
#define _FASTLED_H_


#include "nrf.h"
#include "led.h"
#include "systick.h"


static const tRGB PaletteHeatColors_p[] = {
    {0x00, 0x00, 0x00}, 
    {0x33, 0x00, 0x00}, 
    {0x66, 0x00, 0x00}, 
    {0x99, 0x00, 0x00}, 
    {0xCC, 0x00, 0x00}, 
    {0xFF, 0x00, 0x00},
    {0xFF, 0x33, 0x00}, 
    {0xFF, 0x66, 0x00}, 
    {0xFF, 0x99, 0x00}, 
    {0xFF, 0xCC, 0x00}, 
    {0xFF, 0xFF, 0x00}, 
    {0xFF, 0xFF, 0x33}, 
    {0xFF, 0xFF, 0x66}, 
    {0xFF, 0xFF, 0x99}, 
    {0xFF, 0xFF, 0xCC}, 
    {0xFF, 0xFF, 0xFF},
};

static const tRGB PaletteRainbowColors_p[] = {
    {0xFF, 0x00, 0x00},
    {0xD5, 0x2A, 0x00},
    {0xAB, 0x55, 0x00},
    {0xAB, 0x7F, 0x00},
    {0xAB, 0xAB, 0x00},
    {0x56, 0xD5, 0x00},
    {0x00, 0xFF, 0x00},
    {0x00, 0xD5, 0x2A},
    {0x00, 0xAB, 0x55},
    {0x00, 0x56, 0xAA},
    {0x00, 0x00, 0xFF},
    {0x2A, 0x00, 0xD5},
    {0x55, 0x00, 0xAB},
    {0x7F, 0x00, 0x81},
    {0xAB, 0x00, 0x55},
    {0xD5, 0x00, 0x2B},
};

static const tRGB PaletteRainbowStripeColors_p[] = {
	{0xFF, 0x00, 0x00}, 
	{0x00, 0x00, 0x00}, 
	{0xAB, 0x55, 0x00}, 
	{0x00, 0x00, 0x00},
    {0xAB, 0xAB, 0x00}, 
    {0x00, 0x00, 0x00}, 
    {0x00, 0xFF, 0x00}, 
    {0x00, 0x00, 0x00},
    {0x00, 0xAB, 0x55}, 
    {0x00, 0x00, 0x00}, 
    {0x00, 0x00, 0xFF}, 
    {0x00, 0x00, 0x00},
    {0x55, 0x00, 0xAB}, 
    {0x00, 0x00, 0x00}, 
    {0xAB, 0x00, 0x55}, 
    {0x00, 0x00, 0x00}
};

static const tRGB PaletteCloudColors_p[] = {
    {0x00, 0x00, 0xFF},
    {0x00, 0x00, 0x8B},
    {0x00, 0x00, 0x8B},
    {0x00, 0x00, 0x8B},
    {0x00, 0x00, 0x8B},
    {0x00, 0x00, 0x8B},
    {0x00, 0x00, 0x8B},
    {0x00, 0x00, 0x8B},
    {0x00, 0x00, 0xFF},
    {0x00, 0x00, 0x8B},
    {0x00, 0xBF, 0xFF},
    {0x00, 0xBF, 0xFF},
    {0xAD, 0xD8, 0xE6},
    {0xFF, 0xFF, 0xFF},
    {0xAD, 0xD8, 0xE6},
    {0x00, 0xBF, 0xFF},
};

static const tRGB PalettePartyColors_p[] = {
    {0x55, 0x00, 0xAB},
	{0x84, 0x00, 0x7C},
	{0xB5, 0x00, 0x4B},
	{0xE5, 0x00, 0x1B},
	{0xE8, 0x17, 0x00},
	{0xB8, 0x47, 0x00},
	{0xAB, 0x77, 0x00},
	{0xAB, 0xAB, 0x00},
	{0xAB, 0x55, 0x00},
	{0xDD, 0x22, 0x00},
	{0xF2, 0x00, 0x0E},
	{0xC2, 0x00, 0x3E},
	{0x8F, 0x00, 0x71},
	{0x5F, 0x00, 0xA1},
	{0x2F, 0x00, 0xD0},
	{0x00, 0x07, 0xF9},
};

static const tRGB PaletteRedBlue_p[] = {
    {0xFF, 0x00, 0x00},
	{0xFF, 0x00, 0x00},
	{0x00, 0x00, 0x00},
	{0x00, 0x00, 0x00},
	{0x00, 0x00, 0xFF},
	{0x00, 0x00, 0xFF},
	{0x00, 0x00, 0x00},
	{0x00, 0x00, 0x00},
	{0xFF, 0x00, 0x00},
	{0xFF, 0x00, 0x00},
	{0x00, 0x00, 0x00},
	{0x00, 0x00, 0x00},
	{0x00, 0x00, 0xFF},
	{0x00, 0x00, 0xFF},
	{0x00, 0x00, 0x00},
	{0x00, 0x00, 0x00},
};


typedef enum eBlendType{ 
	NOBLEND=0, 
	LINEARBLEND=1 
} tBlendType;


void fadeToBlackBy( tRGB * leds, uint8_t num_leds, uint8_t fadeBy);
void addGlitter(uint8_t chanceOfGlitter, tRGB color);
tRGB ColorFromPalette( const tRGB *pal, uint8_t index, uint8_t brightness, tBlendType blendType);
void hsv2rgb(const tHSV * hsv, tRGB * rgb);
uint8_t qadd8( uint8_t i, uint8_t j);
uint8_t qsub8( uint8_t i, uint8_t j);
static inline uint8_t  scale8( uint8_t i, uint8_t scale) { return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8; }
static inline uint16_t scale16(uint16_t i, uint16_t scale) { return (uint16_t)(((uint32_t)(i) * (1+(uint32_t)(scale))) / 65536); };
static inline uint8_t  scale8_video( uint8_t i, uint8_t scale) { uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0); return j; }
uint8_t random8(void);
uint8_t random8_1(uint8_t lim);
uint8_t random8_2(uint8_t min, uint8_t lim);
void rgb_scale(tRGB * rgb, uint8_t scale);
void rgb_add(tRGB * src_rgb, tRGB add_rgb);
void rgb_or(tRGB * src_rgb, tRGB rgb);
uint16_t beat8( uint16_t beats_per_minute_88, uint32_t timebase);
uint16_t beat16( uint16_t beats_per_minute, uint32_t timebase);
uint8_t  beatsin8( uint16_t beats_per_minute, uint8_t lowest, uint8_t highest, uint32_t timebase, uint8_t phase_offset);
uint16_t beatsin16( uint16_t beats_per_minute, uint16_t lowest, uint16_t highest, uint32_t timebase, uint16_t phase_offset);
uint8_t sin8( uint8_t theta);
int16_t sin16( uint16_t theta );


#endif
